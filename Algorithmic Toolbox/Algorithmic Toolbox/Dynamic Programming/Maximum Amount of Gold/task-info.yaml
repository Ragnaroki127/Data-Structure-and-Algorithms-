type: edu
files:
- name: logo.png
  visible: false
  learner_created: false
- name: tests.py
  visible: false
  learner_created: false
- name: maximum_gold.py
  visible: true
  placeholders:
  - offset: 204
    length: 729
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 204
    initialized_from_dependency: false
    selected: true
    status: Unchecked
  text: |
    # python3

    from sys import stdin


    def maximum_gold(capacity, weights):
        assert 1 <= capacity <= 10 ** 4
        assert 1 <= len(weights) <= 10 ** 3
        assert all(1 <= w <= 10 ** 5 for w in weights)

        type here


    if __name__ == '__main__':
        input_capacity, n, *input_weights = list(map(int, stdin.read().split()))
        assert len(input_weights) == n

        print(maximum_gold(input_capacity, input_weights))
  learner_created: false
- name: maximum_gold_unit_tests.py
  visible: true
  placeholders:
  - offset: 278
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 278
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from maximum_gold import maximum_gold


    class MaximumGold(unittest.TestCase):
        def test(self):
            for capacity, weights, answer in (
                (10, (1, 4, 8), 9),
                (20, (5, 7, 12, 18), 19),
                (10, (3, 5, 3, 3, 5), 10),
                type here
            ):
                self.assertEqual(maximum_gold(capacity, weights), answer)


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions
status: Unchecked
record: -1
