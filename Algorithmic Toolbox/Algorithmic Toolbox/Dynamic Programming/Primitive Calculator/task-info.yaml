type: edu
files:
- name: logo.png
  visible: false
  learner_created: false
- name: primitive_calculator_unit_tests.py
  visible: true
  placeholders:
  - offset: 186
    length: 9
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 186
    initialized_from_dependency: false
    selected: false
    status: Unchecked
  text: |
    import unittest
    from primitive_calculator import compute_operations


    class PrimitiveCalculator(unittest.TestCase):
        def test(self):
            for n, answer in ((2, 1), (3, 1), (5, 3), type here):
                sequence = compute_operations(n)
                self.assertEqual(answer, len(sequence) - 1)
                self.assertEqual(sequence[0], 1)
                self.assertEqual(sequence[-1], n)
                for i in range(len(sequence) - 1):
                    if sequence[i + 1] != sequence[i] + 1 and sequence[i + 1] != 2 * sequence[i]:
                        self.assertEqual(sequence[i + 1], 3 * sequence[i])


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: tests.py
  visible: false
  learner_created: false
- name: primitive_calculator.py
  visible: true
  placeholders:
  - offset: 202
    length: 1681
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 72
    initialized_from_dependency: false
    selected: true
    status: Unchecked
  text: |
    # python3


    def compute_operations(n):
        assert 1 <= n <= 10 ** 6
        type here


    if __name__ == '__main__':
        input_n = int(input())
        output_sequence = compute_operations(input_n)
        print(len(output_sequence) - 1)
        print(*output_sequence)
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/ekN4T/programming-assignment-4-dynamic-programming/discussions
status: Unchecked
record: -1
