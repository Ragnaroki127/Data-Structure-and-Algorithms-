type: edu
files:
- name: logo.png
  visible: false
  learner_created: false
- name: maximum_salary_unit_tests.py
  visible: true
  placeholders:
  - offset: 241
    length: 19
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 253
    initialized_from_dependency: false
    selected: true
    status: Failed
  text: |
    import unittest
    from random import randint
    from maximum_salary import largest_number_naive, largest_number


    class TestLargestNumber(unittest.TestCase):
        def test_small(self):
            for numbers in [
                [1],
                [1, 2],
                type here
                [1, 12],
                [2, 12],
                [2, 21],
                [2, 21, 23, 211, 213, 231, 232]
            ]:
                self.assertEqual(largest_number(numbers),
                                 largest_number_naive(numbers))

        def test_random(self):
            for n in range(2, 7):
                for max_value in [10, 20, 100, 1000]:
                    for _ in range(10):
                        numbers = [randint(1, max_value) for _ in range(n)]
                        self.assertEqual(largest_number(numbers),
                                         largest_number_naive(numbers))


    if __name__ == '__main__':
        unittest.main()
  learner_created: false
- name: tests.py
  visible: false
  learner_created: false
- name: maximum_salary.py
  visible: true
  placeholders:
  - offset: 395
    length: 346
    placeholder_text: type here
    initial_state:
      length: 9
      offset: 298
    initialized_from_dependency: false
    selected: true
    status: Failed
  text: |
    # python3

    from itertools import permutations


    def largest_number_naive(numbers):
        numbers = list(map(str, numbers))

        largest = 0

        for permutation in permutations(numbers):
            largest = max(largest, int("".join(permutation)))

        return largest


    def largest_number(numbers):
        type here


    if __name__ == '__main__':
        n = int(input())
        input_numbers = input().split()
        assert len(input_numbers) == n
        print(largest_number(input_numbers))
  learner_created: false
feedback_link: https://www.coursera.org/learn/algorithmic-toolbox/programming/kAiGl/programming-assignment-2-greedy-algorithms/discussions
status: Failed
record: -1
